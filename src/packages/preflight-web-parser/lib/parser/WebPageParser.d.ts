import { ParsedElement } from "../models/ParsedElement";
import { Primitive } from "../models/primitive";
import { BaseUpDownParser } from "./BaseUpDownParser";
import { BaseScannerParser } from "./BaseScannerParser";
import { ParsedElementData } from "../models/parsedData/ParsedElementData";
import { ParserElementResult } from "../models/ParserElementResult";
import { WebPageParserConfig } from "./WebPageParserConfig";
export default class WebPageParser {
    get parserVersion(): string;
    static readonly TimeoutWatcherId = "WebPageParserTimeout";
    allParsedElements: ParsedElement[];
    parsedTreeRoot: ParsedElement | null;
    parsedTreeFlat: ParsedElementData[];
    private previouslyParsedTokens;
    private rootMutationObserver;
    private lastMutatedElements;
    private allowedElements;
    config: WebPageParserConfig;
    static BuildFromConfig(config: WebPageParserConfig): WebPageParser;
    constructor(rootElement: HTMLElement, ignoreElementsXpath?: string[], recycleParsedTokes?: boolean, isDrawingBordersOn?: boolean, parentDocument?: Document);
    readonly lexicalAnalysis_PrimitiveUpDownParsers: BaseUpDownParser[];
    readonly lexicalAnalysis_PrimitiveScannerParsers: BaseScannerParser[];
    readonly lexicalAnalysis_StructuresScannerParsers: BaseScannerParser[];
    readonly lexicalAnalysis_StructuresUpDownParsers: BaseUpDownParser[];
    readonly syntacticAnalysisParsers: BaseUpDownParser[];
    private preParsedTokens;
    getParsedDataForElement(el: HTMLElement, refreshParsedData?: boolean, discardPreviouslyParsedElements?: boolean, parseOnlyTargetPath?: boolean): ParserElementResult | null;
    getParserDataOnlyForElement(targetGuid: string): ParserElementResult | null;
    private initializeBeforeParse;
    stop(): void;
    parseDOM(discardPreviouslyParsedElements: boolean, onlyForTarget?: Primitive | null): ParsedElement;
    private parsedDataPostProcessing;
    private GenericTextPostProcessor;
    parseOnlyTargetDOMToFlatData(discardPreviouslyParsedElements: boolean | undefined, onlyForTarget: Primitive): ParsedElementData[];
    parseDOMToFlatData(discardPreviouslyParsedElements?: boolean): ParsedElementData[];
    getPseudoSelector(el: HTMLElement): string | null;
    findParsedElementGuid(el: HTMLElement | null): string | null;
    findParentParsedElement(el: HTMLElement | null): Primitive | null;
    clearParserDataFromDOM(): void;
    private lexicalAnalysisInstant;
    private lexicalAnalysisUpDown;
    private syntacticAnalysis;
    private isElementPreparsed;
    private parseElements;
    private clearParsedTokens;
    private handleMutations;
    private startMutationObserver;
    private pauseMutationObserver;
    private generateAllowedElements;
    isElementAllowed(element: Primitive): boolean;
    writePathToConsole(pseudoSelector: string): void;
}
