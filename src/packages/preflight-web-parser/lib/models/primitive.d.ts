import { ElementType } from "../types/enums/ElementType";
import { CursorType } from "../types/enums/CursorType";
import { Rectangle } from "./Rectangle";
export declare class Primitive {
    readonly Element: Node;
    isTagNode: boolean;
    constructor(element: Node);
    get href(): string | null;
    get hrefWithoutHost(): string | null;
    get HtmlElement(): HTMLElement;
    get shadowRoot(): ShadowRoot | null;
    get isIFrame(): boolean;
    get id(): string | null;
    set guidLink(value: string | undefined | null);
    get guidLink(): string | undefined | null;
    set guid(value: string | null);
    get guid(): string | null;
    set isIgnored(value: boolean);
    get isIgnored(): boolean;
    set pfpType(value: string | null);
    get pfpType(): string | null;
    getData<Type = string>(name: string): Type | null;
    setData<Type = string>(name: string, value: Type): void;
    deletePfpData(): void;
    addClass(className: string, prefix?: string): void;
    removeClass(className: string, prefix?: string): void;
    setHighlightingData(content: string, type: string): void;
    removeHighlightingData(type: string): void;
    get typeFromData(): string | undefined | null;
    set typeFromData(type: ElementType | string | undefined | null);
    isPfType(type: ElementType): boolean;
    isNotType(type: ElementType): boolean;
    getAttribute(name: string): string | null;
    eq(pEl: Primitive | null): boolean;
    get parentElement(): Primitive | null;
    get parents(): Primitive[];
    get previousElementSibling(): Primitive | null;
    get nextElementSibling(): Primitive | null;
    get classListWithoutAutogen(): string[];
    get classList(): string[];
    get isRecurring(): boolean;
    get boundingRect(): DOMRect;
    get realRect(): Rectangle;
    get size(): DOMRect | {
        width: number;
        height: number;
    };
    get area(): number;
    get sizeWithoutPadding(): {
        width: number;
        height: number;
    };
    get padding(): string | {
        top: number;
        right: number;
        bottom: number;
        left: number;
    };
    get margin(): {
        top: number;
        right: number;
        bottom: number;
        left: number;
    };
    get isVisibleBySize(): boolean;
    get isVisible(): boolean;
    get childrenCount(): number;
    get children(): Primitive[];
    get validChildren(): Primitive[];
    get nextSiblings(): Primitive[];
    get prevSiblings(): Primitive[];
    get innerText(): string;
    get innerTexts(): string[];
    get isTextElement(): boolean;
    get tagName(): string;
    get type(): ElementType;
    get isCheckbox(): boolean;
    get isRadioButton(): boolean;
    private detectHeading;
    get isHeadingType(): boolean;
    get cursor(): CursorType;
    get display(): string;
    get isBlock(): boolean;
    querySelector(selector: string): Primitive | null;
    querySelectorAll(selector: string): Primitive[] | null;
    getXpath(xpath: string, searchInChildren?: boolean, allowHidden?: boolean, allowTextNodes?: boolean, maxResults?: number): Primitive[];
    distanceTo(el: Primitive): {
        x: number;
        y: number;
        xClosest: number;
        yClosest: number;
        topLeftDistance: number;
        centerDistance: number;
        isAbove: boolean;
        isOnLeft: boolean;
    };
    distanceTopLeftTo(el: Primitive): number;
    distanceCentersTo(el: Primitive): number;
    distanceShortestTo(el: Primitive): number;
    containsElementVisually(el: Primitive, tolerance?: number): boolean;
    isAbove(el: Primitive): boolean;
    isLeft(el: Primitive): boolean;
    isInside(el: Primitive): void;
    hasSimilarSize(el: Primitive, wTolerance: number, hTolerance: number): boolean;
    getAllTextNodes(): Primitive[];
    get fontSize(): number;
    get numberOfElInnerTexts(): number;
    getComputedStyleProp(property: string): string;
    get hasCursorPointer(): boolean;
    isVisibleInViewport(toleranceX?: number, toleranceY?: number): boolean;
}
